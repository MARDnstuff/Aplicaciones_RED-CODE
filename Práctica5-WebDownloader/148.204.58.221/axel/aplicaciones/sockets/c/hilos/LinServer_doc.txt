SERVIDOR
usuario@escom-Veriton-M670G:~/Escritorio$ gcc -o LinServer LinServer.cpp -lpthread 

ó

usuario@escom-Veriton-M670G:~/Escritorio$ g++ -o LinServer LinServer.cpp -lpthread

CLIENTE

usuario@escom-Veriton-M670G:~/Escritorio$ gcc -o LinClient LinClient.cpp -lpthread

ó

usuario@escom-Veriton-M670G:~/Escritorio$ g++ -o LinClient LinClient.cpp -lpthread


----------------------------------------------------------------------------------------------------------------------------------
NAME
       pthread_create - create a new thread

SYNOPSIS
       #include <pthread.h>

       int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg);

       Compile and link with -pthread.

DESCRIPTION
       The  pthread_create()  function  starts  a  new  thread  in the calling
       process.  The new thread starts execution by invoking  start_routine();
       arg is passed as the sole argument of start_routine().

       The new thread terminates in one of the following ways:

       * It  calls  pthread_exit(3),  specifying  an exit status value that is
         available  to  another  thread  in  the  same  process   that   calls
         pthread_join(3).

The new thread terminates in one of the following ways:

       * It  calls  pthread_exit(3),  specifying  an exit status value that is
         available  to  another  thread  in  the  same  process   that   calls
         pthread_join(3).

       * It  returns  from  start_routine().   This  is  equivalent to calling
         pthread_exit(3) with the value supplied in the return statement.

       * It is canceled (see pthread_cancel(3)).

       * Any of the threads in the process calls exit(3), or the  main  thread
         performs  a  return  from main().  This causes the termination of all
         threads in the process.

       The attr argument points to a pthread_attr_t structure  whose  contents
       are  used  at  thread creation time to determine attributes for the new
       thread; this structure is initialized  using  pthread_attr_init(3)  and
       related  functions.   If  attr is NULL, then the thread is created with
       default attributes.

       Before returning, a successful call to pthread_create() stores  the  ID
       of  the  new thread in the buffer pointed to by thread; this identifier
       is used to refer to the thread in subsequent calls  to  other  pthreads
       functions.

       The  new  thread  inherits  a copy of the creating thread's signal mask
       (pthread_sigmask(3)).  The set of pending signals for the new thread is
       empty  (sigpending(2)).   The  new thread does not inherit the creating
       thread's alternate signal stack (sigaltstack(2)).

       The new thread inherits the calling thread's floating-point environment
       (fenv(3)).

       The  initial  value  of  the  new  thread's  CPU-time  clock  is 0 (see
       pthread_getcpuclockid(3)).

   Linux-specific details
       The new thread inherits copies of the calling thread's capability  sets
       (see capabilities(7)) and CPU affinity mask (see sched_setaffinity(2)).

RETURN VALUE
       On  success,  pthread_create() returns 0; on error, it returns an error
       number, and the contents of *thread are undefined.

ERRORS
       EAGAIN Insufficient resources to create another thread,  or  a  system-
              imposed  limit  on  the  number of threads was encountered.  The
              latter case  may  occur  in  two  ways:  the  RLIMIT_NPROC  soft
              resource  limit  (set via setrlimit(2)), which limits the number
              of process for a real user ID, was reached; or the kernel's sys-
              tem-wide   limit   on  the  number  of  threads,  /proc/sys/ker-
              nel/threads-max, was reached.

       EINVAL Invalid settings in attr.

       EPERM  No permission to set the scheduling policy and parameters speci-
              fied in attr.

CONFORMING TO
       POSIX.1-2001.

NOTES
       See  pthread_self(3)  for further information on the thread ID returned
       in *thread by pthread_create().  Unless real-time  scheduling  policies
       are  being employed, after a call to pthread_create(), it is indetermi-
       nate which thread—the caller or the new thread—will next execute.

       A thread may either be joinable or detached.  If a thread is  joinable,
       then  another thread can call pthread_join(3) to wait for the thread to
       terminate and fetch its exit status.  Only when a  terminated  joinable
       thread  has  been joined are the last of its resources released back to
       the system.  When a detached thread terminates, its resources are auto-
       matically  released back to the system: it is not possible to join with
       the thread in order  to  obtain  its  exit  status.   Making  a  thread
       detached  is  useful for some types of daemon threads whose exit status
       the application does not need to care about.  By default, a new  thread
       is  created  in  a  joinable  state,  unless attr was set to create the
       thread in a detached state (using pthread_attr_setdetachstate(3)).

detached implica que no obtendremos el código de salida al terminar un hilo para saber por que terminó, con join si

NAME
       pthread_detach - detach a thread

SYNOPSIS
       #include <pthread.h>

       int pthread_detach(pthread_t thread);

       Compile and link with -pthread.

DESCRIPTION
       The  pthread_detach() function marks the thread identified by thread as
       detached.  When a detached thread terminates, its resources  are  auto-
       matically  released  back  to  the  system without the need for another
       thread to join with the terminated thread.

       Attempting to detach an already detached thread results in  unspecified
       behavior.

RETURN VALUE
       On  success,  pthread_detach() returns 0; on error, it returns an error
       number.

ERRORS
       EINVAL thread is not a joinable thread.

       ESRCH  No thread with the ID thread could be found.

CONFORMING TO
       POSIX.1-2001.

NOTES
       Once  a  thread  has  been  detached,   it   can't   be   joined   with
       pthread_join(3) or be made joinable again.

       A new thread can be created in a detached state using pthread_attr_set-
       detachstate(3) to set the detached attribute of the  attr  argument  of
       pthread_create(3).

       The  detached  attribute  merely  determines the behavior of the system
       when the thread terminates; it does not prevent the thread  from  being
       terminated if the process terminates using exit(3) (or equivalently, if
       the main thread returns).
EXAMPLE
       The following statement detaches the calling thread:

           pthread_detach(pthread_self());

SEE ALSO
       pthread_attr_setdetachstate(3),  pthread_cancel(3),  pthread_create(3),
       pthread_exit(3), pthread_join(3), pthreads(7)
------------------------------------------------------------------------------------------------------------------------------

NAME
       pthread_join - join with a terminated thread

SYNOPSIS
       #include <pthread.h>

       int pthread_join(pthread_t thread, void **retval);

       Compile and link with -pthread.

DESCRIPTION
       The  pthread_join()  function  waits  for  the  thread specified by thread to terminate.  If that thread has already terminated, then pthread_join()
       returns immediately.  The thread specified by thread must be joinable.

       If retval is not NULL, then pthread_join() copies the exit status of the target  thread  (i.e.,  the  value  that  the  target  thread  supplied  to
       pthread_exit(3)) into the location pointed to by *retval.  If the target thread was canceled, then PTHREAD_CANCELED is placed in *retval.

       If  multiple  threads simultaneously try to join with the same thread, the results are undefined.  If the thread calling pthread_join() is canceled,
       then the target thread will remain joinable (i.e., it will not be detached).

RETURN VALUE
       On success, pthread_join() returns 0; on error, it returns an error number.

ERRORS
       EDEADLK
              A deadlock was detected (e.g., two threads tried to join with each other); or thread specifies the calling thread.

       EINVAL thread is not a joinable thread.

       EINVAL Another thread is already waiting to join with this thread.

       ESRCH  No thread with the ID thread could be found.

CONFORMING TO
       POSIX.1-2001.

NOTES
       After a successful call to pthread_join(), the caller is guaranteed that the target thread has terminated.

       Joining with a thread that has previously been joined results in undefined behavior.

       Failure to join with a thread that is joinable (i.e., one that is not detached), produces a "zombie thread".  Avoid doing this,  since  each  zombie
       thread consumes some system resources, and when enough zombie threads have accumulated, it will no longer be possible to create new threads (or pro-
       cesses).
EXAMPLE
       See pthread_create(3).

SEE ALSO
       pthread_cancel(3), pthread_create(3), pthread_detach(3), pthread_exit(3), pthread_tryjoin_np(3), pthreads(7)

